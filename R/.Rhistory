# Set the number of bootstrap iterations
n_iterations <- 1000
# Perform bootstrapped ANOVA
boot_ANOVA <- boot(anova_df, anova_func, R = n_iterations)
NP_N_Col
P_Ndf
P_N_SUM
P_N_sums_vector
P_Ndf
P_N_subject_sum <-rowMeans(P_Ndf)
P_N_subject_sum
P_N_subject_sum <-rowMeans(P_Ndf)
P_S_subject_sum <-rowMeans(P_Sdf)
NP_N_subject_sum <-rowMeans(NP_Ndf)
NP_S_subject_sum <-rowMeans(NP_Sdf)
number_of_row
participantID <- c(1:number_of_row)
Anova_within_subjects_mean_df <- data.frame(
participantID=participantID,
P_N <- P_N_subject_mean,
P_S <- P_S_subject_mean,
NP_N <- NP_N_subject_mean,
NP_S <- NP_S_subject_mean
)
source("~/Desktop/BGU/פסיכולוגיה/שנה ב/סמסטר ב/מתודולוגיה ניסויית/R/Production.R", echo=TRUE)
Anova_within_subjects_mean_df
View(Anova_within_subjects_mean_df)
model <- aov(trust_score ~ P_N * P_S * NP_N * NP_S + Error(participantID/(P_N * P_S * NP_N * NP_S)), data = anova_df)
library(tidyverse)
long_df <- Anova_within_subjects_mean_df %>%
pivot_longer(cols = starts_with("P_"),
names_to = "Condition",
values_to = "Trust_Score_P") %>%
pivot_longer(cols = starts_with("NP_"),
names_to = "Condition",
values_to = "Trust_Score_NP") %>%
separate(Condition, into = c("Factor", "Level"), sep = "_")
long_df
long_df <- Anova_within_subjects_mean_df %>%
pivot_longer(cols = starts_with("P_"),
names_to = "Condition",
values_to = "Trust_Score_P") %>%
pivot_longer(cols = starts_with("NP_"),
names_to = "Condition",
values_to = "Trust_Score_NP") %>%
separate(Condition, into = c("Factor", "Level"), sep = "_")
library(tidyverse)
long_df <- Anova_within_subjects_mean_df %>%
pivot_longer(cols = starts_with("P_"),
names_to = "Condition",
values_to = "Trust_Score_P") %>%
pivot_longer(cols = starts_with("NP_"),
names_to = "Condition",
values_to = "Trust_Score_NP") %>%
separate(Condition, into = c("Factor", "Condition"), sep = "_")
long_df <- anova_df %>%
pivot_longer(cols = starts_with("P_"),
names_to = c("Factor", "Condition"),
values_to = "Trust_Score_P") %>%
pivot_longer(cols = starts_with("NP_"),
names_to = c("Factor", "Condition"),
values_to = "Trust_Score_NP")
# Convert "politician" and "smiling" variables to factors
long_df$Factor <- factor(long_df$Factor, levels = c("P", "NP"))
long_df$Condition <- factor(long_df$Condition, levels = c("N", "S"))
library(tidyverse)
long_df <- Anova_within_subjects_mean_df %>%
pivot_longer(cols = starts_with("P_"),
names_to = c("Factor", "Condition"),
values_to = "Trust_Score_P") %>%
pivot_longer(cols = starts_with("NP_"),
names_to = c("Factor", "Condition"),
values_to = "Trust_Score_NP")
# Convert "politician" and "smiling" variables to factors
long_df$Factor <- factor(long_df$Factor, levels = c("P", "NP"))
long_df$Condition <- factor(long_df$Condition, levels = c("N", "S"))
library(tidyverse)
long_df <- anova_df %>%
pivot_longer(cols = c(P_N, P_S, NP_N, NP_S),
names_to = c("Factor", "Condition"),
values_to = "Trust_Score") %>%
separate(Condition, into = c("Condition1", "Condition2"), sep = "_")
model <- aov(cbind(P_N, P_S, NP_N, NP_S) ~ 1 + Error(participantID) + P_S:P_N + NP_N:NP_S, data = Anova_within_subjects_mean_df)
summary(model)
parameters(model)
summary(model)
View(Anova_within_subjects_mean_df)
Anova_within_subjects_mean_df <- data.frame(
participantID =participantID,
P_N <- P_N_subject_mean,
P_S <- P_S_subject_mean,
NP_N <- NP_N_subject_mean,
NP_S <- NP_S_subject_mean
)
View(Anova_within_subjects_mean_df)
Anova_within_subjects_mean_df <- data.frame(
"participantID" =participantID,
"P_N" <- P_N_subject_mean,
"P_S" <- P_S_subject_mean,
"NP_N" <- NP_N_subject_mean,
"NP_S" <- NP_S_subject_mean
)
View(Anova_within_subjects_mean_df)
Anova_within_subjects_mean_df <- setNames(Anova_within_subjects_mean_df, c("participantID","P_N", "P_S","NP_N", "NP_S"))
long_df <- Anova_within_subjects_mean_df %>%
pivot_longer(cols = starts_with("P_"), names_to = "Condition", values_to = "Trust_Score") %>%
separate(col = "Condition", into = c("Politician", "Smiling"), sep = "_")
# Perform the two-way ANOVA
model <- aov(Trust_Score ~ Politician * Smiling + Error(participantID/(Politician * Smiling)), data = long_df)
long_df
Anova_within_subjects_mean_df <- setNames(Anova_within_subjects_mean_df, c("participantID","P_N", "P_S","NP_N", "NP_S"))
long_df <- Anova_within_subjects_mean_df %>%
pivot_longer(cols = starts_with("P_"), names_to = "Condition", values_to = "Trust_Score") %>%
separate(col = "Condition", into = c("Politician", "Smiling"), sep = "_")
long_df <- gather(long_df, Condition, Trust_Score, -participantID, -Politician, -Smiling)
model <- aov(Trust_Score ~ Politician * Smiling + Error(participantID/(Politician * Smiling)), data = long_df)
long_df
long_df <- tidyr::gather(Anova_within_subjects_mean_df, Condition, Trust_Score, -participantID)
# Convert the factors to appropriate data types
long_df$Condition <- factor(long_df$Condition)
long_df$Politician <- factor(long_df$Politician)
long_df$Politician <- factor(long_df$Politician)
long_df
long_df <- tidyr::gather(Anova_within_subjects_mean_df, Condition, Trust_Score, -participantID)
long_df
factor(long_df$Condition)
# Run the two-way ANOVA within subjects
model <- aov(Trust_Score ~ Condition  + Error(participantID/Condition), data = long_df)
summary(model)
long_df
# Create new variables for politician and smiling based on the Condition column
long_df$Politician <- ifelse(substr(long_df$Condition, 1, 1) == "P", TRUE, FALSE)
long_df$Smiling <- ifelse(substr(long_df$Condition, 3, 3) == "S", TRUE, FALSE)
long_df
long_df$Politician <- substr(long_df$Condition, 1, 1) == "P"
long_df$Smiling <- substr(long_df$Condition, 3, 3) == "S"
long_df <- tidyr::gather(Anova_within_subjects_mean_df, Condition, Trust_Score, -participantID)
# Create new variables for politician and smiling based on the Condition column
long_df$Politician <- ifelse(substr(long_df$Condition, 1, 1) == "P", TRUE, FALSE)
long_df$Smiling <- ifelse(substr(long_df$Condition, 3, 3) == "S", TRUE, FALSE)
long_df
long_df$Politician <- substr(long_df$Condition, 1, 1) == "P"
long_df$Smiling <- substr(long_df$Condition, 3, 3) == "S"
long_df
long_df <- tidyr::gather(Anova_within_subjects_mean_df, Condition, Trust_Score, -participantID)
# Create new variables for politician and smiling based on the Condition column
long_df$Politician <- ifelse(substr(long_df$Condition, 1, 1) == "P", TRUE, FALSE)
substr?
?substr
substr?
long_df$Condition
long_df
long_df$Condition
long_df$Smiling <- ifelse(substr(long_df$Condition, 3|4, 3|4) == "S", TRUE, FALSE)
long_df
long_df$Smiling <- ifelse(substr(long_df$Condition, 3|4, 3) == "S", TRUE, FALSE)
long_df
long_df$Smiling <- ifelse(substr(long_df$Condition, nchar(long_df$Condition), nchar(long_df$Condition)) == "S", TRUE, FALSE)
long_df
# Remove the Condition column
long_df <- long_df[, -2]
long_df
# Run the two-way ANOVA within subjects
model <- aov(Trust_Score ~ Politician * Smiling  + Error(participantID/(Politician * Smiling)), data = long_df)
summary(model)
sum(P_Ndf)
source("~/Desktop/BGU/פסיכולוגיה/שנה ב/סמסטר ב/מתודולוגיה ניסויית/R/Production.R", echo=TRUE)
long_df
P_N_subject_sum
rowSums
P_Ndf
P_N_subject_sum
Anova_within_subjects_mean_df
P_Ndf
rowSums(P_Ndf)
sums(P_Ndf[1,])
sum(P_Ndf[1,])
sum(P_Ndf[,1])
P_Ndf[1,]
View(P_Ndf)
NP_N_sums_vector
P_Sdf
sum_row
P_Sdf
sum_row
View(P_Ndf)
View(P_Sdf)
sums
View(mydata)
P_N_subject_sum <-rowSums(P_Ndf)
P_S_subject_sum <-rowSums(P_Sdf)
NP_N_subject_sum <-rowSums(NP_Ndf)
NP_S_subject_sum <-rowSums(NP_Sdf)
P_N_subject_sum
mean(P_N_subject_sum)
mean(P_N_subject_sum)\10
mean(P_N_subject_sum)/10
long_df
# Create new variables for politician and smiling based on the Condition column
long_df$Politician <- ifelse(substr(long_df$Condition, 1, 1) == "P", TRUE, FALSE)
long_df$Smiling <- ifelse(substr(long_df$Condition, nchar(long_df$Condition), nchar(long_df$Condition)) == "S", TRUE, FALSE)
# Remove the Condition column
long_df <- long_df[, -2]
# Run the two-way ANOVA within subjects
model <- aov(Trust_Score ~ Politician * Smiling  + Error(participantID/(Politician * Smiling)), data = long_df)
summary(model)
long_df
source("~/Desktop/BGU/פסיכולוגיה/שנה ב/סמסטר ב/מתודולוגיה ניסויית/R/Production.R", echo=TRUE)
# assumption check - normality
shapiro.test(residuals(model))
# assumption check - normality
shapiro.test(residuals(model$Within))
model$Within
long_df
P_N_subject_mean <-rowMeans(P_Ndf)
P_S_subject_mean<-rowMeans(P_Sdf)
NP_N_subject_mean <-rowMeans(NP_Ndf)
NP_S_subject_mean<-rowMeans(NP_Sdf)
participantID <- c(1:rowMeans)
P_N_subject_mean <-rowMeans(P_Ndf)
P_S_subject_mean<-rowMeans(P_Sdf)
NP_N_subject_mean <-rowMeans(NP_Ndf)
NP_S_subject_mean<-rowMeans(NP_Sdf)
participantID <- c(1:rowMeans)
Anova_within_subjects_mean_df <- data.frame(
participantID =participantID,
P_N <- P_N_subject_mean,
P_S <- P_S_subject_mean,
NP_N <- NP_N_subject_mean,
NP_S <- NP_S_subject_mean
)
participantID <- c(1:number_of_row)
Anova_within_subjects_mean_df <- data.frame(
participantID =participantID,
P_N <- P_N_subject_mean,
P_S <- P_S_subject_mean,
NP_N <- NP_N_subject_mean,
NP_S <- NP_S_subject_mean
)
Anova_within_subjects_mean_df <- setNames(Anova_within_subjects_mean_df, c("participantID","P_N", "P_S","NP_N", "NP_S"))
long_df <- tidyr::gather(Anova_within_subjects_mean_df, Condition, Trust_Score, -participantID)
# Create new variables for politician and smiling based on the Condition column
long_df$Politician <- ifelse(substr(long_df$Condition, 1, 1) == "P", TRUE, FALSE)
long_df$Smiling <- ifelse(substr(long_df$Condition, nchar(long_df$Condition), nchar(long_df$Condition)) == "S", TRUE, FALSE)
long_df
# Run the two-way ANOVA within subjects
model <- aov(Trust_Score ~ Politician * Smiling  + Error(participantID/(Politician * Smiling)), data = long_df)
summary(model)
# assumption check - normality
shapiro.test(residuals(long_df$Trust_Score))
# assumption check - normality
shapiro.test(residuals(long_df$Trust_Score))
Anova_within_subjects_mean_df
rowMeans(Anova_within_subjects_mean_df)
# assumption check - normality
shapiro.test(residuals(rowMeans(Anova_within_subjects_mean_df)))
# assumption check - normality
shapiro.test(residuals(model))
# assumption check - normality
shapiro.test(residuals(model$Within))
model
summary(model)
# assumption check - normality
shapiro.test(residuals(model$Within))
long_df
# assumption check - Homogeneity of variances
library(car)
leveneTest(residuals(model$Within) ~ Politician * Smiling, data = Anova_within_subjects_mean_df)
Anova_within_subjects_mean_df
leveneTest(residuals(model$Within) ~ Politician * Smiling, data = long_df)
long_df
long_df
leveneTest(residuals(model$Within) ~ Politician * Smiling, data = long_df)
odel$Within
model$Within
residuals(model)
residuals(model$Within)
long_df
leveneTest(residuals(model$Within) ~ Politician * Smiling, data = long_df)
length(Politician)
length(Smiling)
length(model$`participantID:Politician`)
length(model$`participantID:Politician`)
length(model$`participantID:`participantID:Smiling``)
length(model$`participantID:Smiling`)
length(model$Within)
leveneTest(residuals(model$Within) ~ Politician * Smiling, data = long_df)
summary(model)
leveneTest(residuals(model), long_df$Condition)
as.numeric(model)
as.numeric(residuals(model)
as.numeric(residuals(model)
as.numeric(residuals(model))
residuals(model)
resid(model)
#-------check assumptions
observed <- long_df$Trust_Score
# Get the fitted values
fitted <- fitted(model)
fitted
fitted(model)
model$`(Intercept)`
model2 <- ezANOVA(data = long_df, dv = Trust_Score, wid = participantID, within = .(Politician, Smiling), type = 3)
install.packages("ez")
library(ez)
model2 <- ezANOVA(data = long_df, dv = Trust_Score, wid = participantID, within = .(Politician, Smiling), type = 3)
model2
summary(model2)
summary(model2)
model2 <- ezANOVA(data = long_df, dv = Trust_Score, wid = participantID, within = .(Politician, Smiling), type = 3)
summary(model2)
summary(model2)
model2
parameter(model)
parameters(model)
# Run the two-way ANOVA within subjects
model <- ezANOVA(data = long_df, dv = Trust_Score, wid = participantID, within = .(Politician, Smiling), type = 3)
parameters(model)
parameters(model)
model
typeof(model)
summary(model)
summary_model <- ezStats(model, type = "param")
model
summary_model <- ezStats(model, type = "param")
summary_model <- ezStats(model)
ezStats(data = long_df, dv = Trust_Score, wid = participantID, within = .(Politician, Smiling))
print(model)
model$ANOVA
residuals(model$ANOVA)
coef(model$ANOVA)
residuals(model)
fitted(long_df$Trust_Score)
fitted(long_df$Trust_Score)
long_df$Trust_Score
fitted
lm(Trust_score ~ Politician * Smiling , data = long_df)
lm(Trust_Score ~ Politician * Smiling , data = long_df)
lm(Trust_Score ~ Politician * Smiling , data = long_df)
fitted(lm(Trust_Score ~ Politician * Smiling , data = long_df))
parameters(lm(Trust_Score ~ Politician * Smiling , data = long_df))
reg_model$Trust_Score
#-------check assumptions (we had to create a reg model to get the residuals)
reg_model <- lm(Trust_Score ~ Politician * Smiling , data = long_df)
observed <- reg_model$Trust_Score
observed
reg_model$residuals
# assumption check - normality
shapiro.test(reg_model$residuals)
leveneTest(reg_model)
leveneTest(reg_model)
model
res(long_df$Trust_Score)
resisual(long_df$Trust_Score)
residual(long_df$Trust_Score)
long_df$Trust_Score
residuals(model)
# Run the two-way ANOVA within subjects
model <- aov(data = long_df, dv = Trust_Score, wid = participantID, within = .(Politician, Smiling), type = 3)
# Run the two-way ANOVA within subjects
model <- ezANOVA(data = long_df, dv = Trust_Score, wid = participantID, within = .(Politician, Smiling), type = 3)
long_df
# Perform the two-way ANOVA
model <- aov(Trust_Score ~ Politician * Smiling + Error(participantID/(Politician * Smiling)), data = long_df)
# Print the ANOVA table
summary(model)
# Run the two-way ANOVA within subjects
long_df$Politician <- as.factor(long_df$Politician)
long_df$Smiling <- as.factor(long_df$Smiling)
long_df
as.factor(long_df$Politician)
as.factor(long_df$Smiling)
# Perform the two-way ANOVA
model <- aov(Trust_Score ~ Politician * Smiling + Error(participantID/(Politician * Smiling)), data = long_df)
# Print the ANOVA table
summary(model)
residuals(model)
source("~/Desktop/BGU/פסיכולוגיה/שנה ב/סמסטר ב/מתודולוגיה ניסויית/R/Production.R", echo=TRUE)
residuals(model)
View(model)
# Perform the two-way ANOVA
model <- aov(Trust_Score ~ Politician * Smiling + Error(participantID/(Politician * Smiling)), data = long_df)
model$`participantID:Politician`
model$`participantID:Smiling`
model$Within
residuals(model$Within)
summary(model)
plot(model$Within$residuals)
model$Within$effects
model$Within$fitted.values
shapiro.test(model$Within$residuals)
residuals(model$Within)
leveneTest(residuals(model$Within))
leveneTest(residuals(model$Within), data = long_df, Politician, Smiling)
leveneTest(residuals(model$Within), data = long_df, long_df$Politician, Smiling)
leveneTest(residuals(model$Within), data = long_df, long_df$Politician, long_df$Smiling)
leveneTest(y = model)
leveneTest(y = model$Within$residuals)
leveneTest(y = model$Within$residuals,group = model$`participantID:Politician`,model$`participantID:Smiling`)
model$`participantID:Politician
'
``
``
model$`participantID:Politician`
leveneTest(Trust_Score ~ Politician + Smiling , data = long_df)
fligner.test(Trust_Score ~ Politician * Smiling, data = long_df)
fligner.test(Trust_Score ~ Politician * Smiling, data = long_df)
bartlett.test(Trust_Score ~ Politician * Smiling, data = long_df)
Trust_Score
long_df
# Print the ANOVA table
summary(model)
# Print the ANOVA table
summary(model)
bartlett.test(nodel)
bartlett.test(model)
bartlett.test(model$Within)
bartlett.test(model)
model
levene.test(model)
levene.test(model)
leveneTest(model)
leveneTest(model$Within)
leveneTest(model$Within$residuals)
View(des_stat)
View(long_df)
leveneTest(Trust_Score ~ Politician + Smiling, data= long_df )
leveneTest(Trust_Score ~ Politician * Smiling, data= long_df )
#
#------------------------------------------plot
df <- melt(long_df, id.vars = c("Politician", "Smiling"), measure.vars = "Trust_Score")
library(reshape2)
#
#------------------------------------------plot
df <- melt(long_df, id.vars = c("Politician", "Smiling"), measure.vars = "Trust_Score")
# Create the interaction plot
interaction.plot(df$Politician, df$Smiling, df$value, xlab = "Politician", ylab = "Trust Score",
trace.label = "Smiling", legend = TRUE)
# Add title and customize the plot
title(main = "Interaction Plot: Trust Score by Politician and Smiling")
legend("topright", legend = levels(df$Smiling), title = "Smiling", fill = c("blue", "red"))
legend("topright", legend = levels(df$Smiling), title = "Smiling", fill = c("blue", "red"))
function (main = NULL, sub = NULL, xlab = NULL, ylab = NULL,
line = NA, outer = FALSE, ...)
# Add title and customize the plot
title(main = "Interaction Plot: Trust Score by Politician and Smiling")
legend("topright", legend = levels(df$Smiling), title = "Smiling", fill = c("blue", "red"))
write_csv(long_df,file = ".")
write_csv(long_df,file = ".")
write_csv(long_df,file = "../")
write_csv(long_df,file = "/.")
write_csv(long_df,file = "./long_df")
car::Anova(model,type =3 )
# Perform the two-way ANOVA
model <- aov(Trust_Score ~ Politician * Smiling + Error(participantID/(Politician * Smiling)), data = long_df)
car::Anova(model,type =3 )
# Perform the two-way ANOVA
model <- aov(Trust_Score ~ Politician + Smiling  + Smiling:Politician + Error(participantID/(Politician * Smiling)), data = long_df)
# Print the ANOVA table
summary(model)
# Perform the two-way ANOVA
model <- aov(Trust_Score ~ Politician + Smiling  + Smiling:Politician + Error(participantID/(Politician: Smiling)), data = long_df)
# Perform the two-way ANOVA
model <- aov(Trust_Score ~ Politician + Smiling  + Smiling:Politician + Error(participantID/(Politician * Smiling)), data = long_df)
car::Anova(model,type =3 )
# Print the ANOVA table
summary(model)
# Perform the two-way ANOVA
model <- aov(Trust_Score ~ Politician * Smiling  + Error(participantID/(Politician * Smiling)), data = long_df)
car::Anova(model,type =3 )
# Print the ANOVA table
summary(model)
car::Anova(model,type =3 )
long_df
View(long_df)
#-----------two way anova - NOT GOOD !
anova_df <- data.frame(
trust_score = c(P_N_sums_vector, P_S_sums_vector, NP_S_sums_vector, NP_N_sums_vector),
is.politician = c(rep(TRUE, length(P_N_sums_vector) + length(P_S_sums_vector)), rep(FALSE, length(NP_S_sums_vector) + length(NP_N_sums_vector))),
is.smiling = c(rep(FALSE, length(P_N_sums_vector)), rep(TRUE, length(P_S_sums_vector)), rep(TRUE, length(NP_S_sums_vector)),  rep(FALSE, length(NP_N_sums_vector)))
)
write_csv(anova_df, "./anova_df.csv")
write_csv(Anova_within_subjects_mean_df, "./Anova_within_subjects_mean_df.csv")
#Two Way
ggplot(anova_df, aes(x = is.politician, y = trust_score, color = is.smiling, shape = is.smiling)) +
geom_point(size = 4) +
geom_line(aes(group = is.smiling), size = 1) +
labs(x = "Is Politician", y = "Trust Score") +
scale_color_manual(values = c("#FF0000", "#0000FF"), labels = c("Not Smiling", "Smiling")) +
scale_shape_manual(values = c(16, 17), labels = c("Not Smiling", "Smiling")) +
theme_minimal() +
theme(legend.position = "top") +
ggtitle("ANOVA Two-Way Interaction Plot") +
annotate("text", x = 2, y = 7, label = paste("p-value =", format.pval(anova_table[3, "Pr(>F)"])))
3.18+ 3.46+ 2.68+ 3.16
12.48/4
cohensD(Anova_within_subjects_mean_df$P_S, Anova_within_subjects_mean_df$P_N)
#cohan's d of the effect between smiling politician and neutral politician
library(lsr)
package.install(lsr)
packages.install(lsr)
install.packages(lsr)
install.packages("lsr")
#cohan's d of the effect between smiling politician and neutral politician
library(lsr)
cohensD(Anova_within_subjects_mean_df$P_S, Anova_within_subjects_mean_df$P_N)
PN_PS<- cohensD(Anova_within_subjects_mean_df$P_S, Anova_within_subjects_mean_df$P_N)
PN_NPS<- cohensD(Anova_within_subjects_mean_df$P_N, Anova_within_subjects_mean_df$NP_S)
PN_NPN<- cohensD(Anova_within_subjects_mean_df$P_N, Anova_within_subjects_mean_df$NP_N)
PS_NPS<- cohensD(Anova_within_subjects_mean_df$P_S, Anova_within_subjects_mean_df$NP_S)
PS_NPN<- cohensD(Anova_within_subjects_mean_df$P_S, Anova_within_subjects_mean_df$NP_N)
NPS_NPN<- cohensD(Anova_within_subjects_mean_df$NP_S, Anova_within_subjects_mean_df$NP_N)
